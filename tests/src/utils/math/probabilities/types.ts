import { expect } from "chai";
import { newRandomDataPointFunction } from "../../../../../src/utils/math/probabilites/types";
import { DataPoint } from "../../../../../src/utils/math/statistics/data-point-class";

const generateFromZeroToOne = (rand01: number) => rand01; 
const generateFromTwoToPi = (rand01: number) => (rand01 * (Math.PI - 2 + 1 ) + 2); 

const randomDataPointFunction = newRandomDataPointFunction({ 
    x: { generate: generateFromZeroToOne, type: "number" }, 
    y: { generate: generateFromZeroToOne, type: "number" }});

const randomDataPointFunction2 = newRandomDataPointFunction({
        x: { generate: generateFromTwoToPi, type: "number" },
        y: { generate: generateFromZeroToOne, type: "number" }
}); 
    
describe("newRandomDataPointFunction", () => {
    /*it("should return a function", () => {
        expect(randomDataPointFunction).to.be.a("function");
    }); 
    it("Created function should return a DataPoint", () => {
        const newDataPoint = randomDataPointFunction(); 
        expect(newDataPoint).to.be.an.instanceof(DataPoint);
        expect(newDataPoint.getProperty("x")).to.be.a("number");
        expect(newDataPoint.getProperty("y")).to.be.a("number");
    }); 

    it("The datapoint should be generated by the generation function", () => {
        const newDataPoint = randomDataPointFunction2(); 
        expect(newDataPoint).to.be.an.instanceof(DataPoint);
        expect(newDataPoint.getProperty("x")).to.be.a("number");
        expect(newDataPoint.getProperty("y")).to.be.a("number");
        expect(newDataPoint.getProperty("x")).to.be.lessThan(Math.PI);
        expect(newDataPoint.getProperty("x")).to.be.greaterThan(2);
    }); */

}); 

 